plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'kr'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

bootJar {
    jar.enabled = false
    archiveFileName = "${rootProject.name}.jar"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// QueryDSL 설정
def generated = 'build/generated'

// QueryDSL QClass 파일 생성 위치 지정
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(generated)
}

sourceSets {
	main.java.srcDirs += [generated]
}

clean {
	delete file(generated)
}

repositories {
    mavenCentral()
}

dependencies {
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

	// Spring Boot 스타터
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.seleniumhq.selenium:selenium-java:4.19.1'
	implementation 'org.seleniumhq.selenium:selenium-chrome-driver:4.19.1'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	implementation 'org.jsoup:jsoup:1.15.3'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'


	// Spring Boot DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.3'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'

	// Swagger 설정을 위한 Springdoc OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.3' // junit 최종버전
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3' // JUnit Jupiter API
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3' // JUnit Jupiter Engine


    // selenium 라이브러리 (동적 사이트)
    //implementation 'org.seleniumhq.selenium:selenium-java:4.1.2'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.19.1'
    implementation 'org.seleniumhq.selenium:selenium-java:4.19.1'
    implementation 'org.seleniumhq.selenium:selenium-chrome-driver:4.19.1'
    implementation 'io.github.bonigarcia:webdrivermanager:5.3.0'

	//영수증 인식 OCR을 위한 JSON 파싱
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	// 클라우드 스토리지 사용을 위한 AWS SDK S3
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.300'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'


	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.json:json:20211205'
}

tasks.named('test') {
    useJUnitPlatform()
}
